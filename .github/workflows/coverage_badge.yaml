# Generates the coverage report, calculates the line coverage,
# creates a coverage badge based on percentage and pushes it to the "gh-pages" branch 
# where we can then fetch it from inside the README

name: Coverage

on:
  push:
    branches: [ '*' ] # Fix before merge should be main later


jobs:
  coverage:
    runs-on: ubuntu-latest  
    steps:

      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Install dependencies
        run: make install

      - name: Configure and Build
        run: make all

      - name: Generate coverage report
        run: make coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-details 
          path: build/coverage_report/coverage_details.html # Contains the coverage of all files

      - name: Extract Coverage Percentage
        run: |
          total_lines=0
          total_covered=0

          skip_headers=1
          while IFS=, read -r filename line_total line_covered line_percent
          do
              if ((skip_headers))
              then
                  ((skip_headers--))
              else
                  total_lines=$((total_lines + line_total))
                  total_covered=$((total_covered + line_covered))
              fi
          done < build/coverage_report/coverage.csv

          echo "Total lines: $total_lines"
          echo "Total covered: $total_covered"
        
          overall_coverage=$(echo "scale=2; $total_covered / $total_lines * 100" | bc)
          echo "Overall line coverage: $overall_coverage%"
          
          echo "COVERAGE=$overall_coverage" >> $GITHUB_ENV

      - name: Create Coverage Badge
        run: |
          if (( $(echo "$COVERAGE >= 90" | bc -l) )); then
              COLOR="brightgreen"
          elif (( $(echo "$COVERAGE >= 80" | bc -l) )); then
              COLOR="green"
          elif (( $(echo "$COVERAGE >= 70" | bc -l) )); then
              COLOR="yellowgreen"
          elif (( $(echo "$COVERAGE >= 50" | bc -l) )); then
              COLOR="yellow"
          else
              COLOR="red"
          fi

          curl -o new-coverage-badge.svg "https://img.shields.io/badge/Coverage-${COVERAGE}%25-${COLOR}"

      - name: Commit and Push Badge to gh-pages
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          git fetch origin
          git checkout gh-pages
          
          mkdir -p docs
          
          if [ -f docs/coverage-badge.svg ]; then
          echo "Removing old coverage badge"
          git rm docs/coverage-badge.svg
          git add docs/coverage-badge.svg
          fi
          
          # Very wierd the badge doesnt even get staged anymore, this worked before
          
          mv new-coverage-badge.svg docs/coverage-badge.svg
          
          git add -f docs/coverage-badge.svg
          git status

          git commit -m "Update coverage badge"
          git push origin gh-pages
